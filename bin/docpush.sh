#!/bin/sh

####################################################################
# A script to push the javadocs to github. You must have permission
# to push changes to the jtk repository. If you have not set up some
# SSH authentication, then pushing the javadocs to github will prompt
# you to enter your github username and password. 
# 
# The recommended option is to use SSH over the HTTPS port:
#   https://help.github.com/articles/using-ssh-over-the-https-port
# Another option is to generate an SSH key and add it to github:
#   https://help.github.com/articles/generating-ssh-keys
#
# NOTE: This script assumes git is on your PATH and that the
#       javadocs have already been generated by running ant with
#       the 'doc' target.
###################################################################

# Where is the Mines JTK? (Where is your build.xml?). The default 
# assumes this script is being run from the bin directory, so the 
# MINES_JTK_HOME directory is equivalent to the parent directory (..)
export MINES_JTK_HOME=..

# Need to be in the MINES_JTK_HOME directory to checkout the 
# gh-pages branch
cd $MINES_JTK_HOME
echo "Using MINES_JTK_HOME=$(pwd)"

# Get the current branch so we can switch back to it at the end
CURRENT_BRANCH=`git branch --no-color | awk '/\*/ {print $2}'`
echo "Currently in branch $CURRENT_BRANCH"

# Check that the docs exist
JAVADOC_HOME=build/doc/api
if [ -d "$JAVADOC_HOME" -a "$(ls -A $JAVADOC_HOME)" ]; then
  echo "Found javadocs in $JAVADOC_HOME. Continuing..."
else
  echo "$JAVADOC_HOME does NOT exist or is empty. 
        Javadocs must be built before running this script.
        Javadocs can be built by running 'ant doc'."
  exit
fi

# Try to switch to the gh-pages branch
git checkout gh-pages || exit $?

# Since the 'build' directory is ignored by git, it still
# exists in the working directory even after switching branches
OLD_DOCS=javadoc
NEW_DOCS=build/doc/api
DIFF_FILE=diff.txt
EDITS_FILE=edits.txt

# diff the old and new docs, ignoring the timestamp for the files.
diff -rq --ignore-matching-lines 'Generated by javadoc' \
  $OLD_DOCS $NEW_DOCS | grep 'Files\|Only' > $DIFF_FILE

# Parse the diff file
cat $DIFF_FILE | while read LINE
do
  LABEL=`echo $LINE | awk '{print $1}'`

  # This means the files differ. Replace the old with the new
  if [ "$LABEL" = "Files" ]; then 
    OLD_FILE=`echo $LINE | awk '{print $2}'`
    NEW_FILE=`echo $LINE | awk '{print $4}'`
    cp $NEW_FILE $OLD_FILE
    echo "Updated file $OLD_FILE" >> $EDITS_FILE

  # The means the file only exists in one location
  elif [ "$LABEL" = "Only" ]; then
    LOC=`echo $LINE | awk '{gsub(/:/,""); print $3}'`
    FILE=`echo $LINE | awk '{print $4}'`

    # If it is only in the OLD_DOCS location, delete it
    if [ $(grep -c $OLD_DOCS <<< $LOC) = 1 ]; then
      rm $LOC/$FILE
      echo "Removed file $LOC/$FILE" >> $EDITS_FILE

    # It must be a new file, add it.
    else
      REL_PATH=`echo $LOC | awk -F $NEW_DOCS '{print $2}'`
      DEST_PATH=$OLD_DOCS$REL_PATH/$FILE
      cp $LOC/$FILE $DEST_PATH
      echo "Added file $DEST_PATH" >> $EDITS_FILE
    fi
  fi
done

rm $DIFF_FILE

# If we made changes then add, commit, and push to github
if [ -f "$EDITS_FILE" ]; then
  git add javadoc || exit $?
  git commit javadoc --file=$EDITS_FILE || exit $?
  rm $EDITS_FILE
  git push origin || exit $?

  # give the push a chance to report back
  sleep 5
else
  echo "The current javadocs in the gh-pages branch are the same as those in $NEW_DOCS."
  echo "Nothing to commit or push to github."
fi

# Switch back to the branch we were originally in
git checkout $CURRENT_BRANCH || \
  echo "Failed to switch back to branch $CURRENT_BRANCH"

